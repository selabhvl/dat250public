/*
 * This source file was generated by the Gradle 'init' task
 */
package no.hvl.dat250.jpa;

import jakarta.persistence.*;
import no.hvl.dat250.jpa.entities.Post;
import no.hvl.dat250.jpa.entities.User;
import no.hvl.dat250.jpa.entities.User_;
import org.hibernate.cfg.JdbcSettings;

import java.util.List;

public class Demo2App {


    public static void main(String[] args) {

        EntityManagerFactory emf = new PersistenceConfiguration("test2")
                .managedClass(User.class)
                .managedClass(Post.class)
                // corresponds to 'jakarta.persistence.jdbc.url' in the persistence.xml
                .property(PersistenceConfiguration.JDBC_URL, "jdbc:h2:mem:users")
                // other properties accordingly
                .property(PersistenceConfiguration.JDBC_USER, "sa")
                .property(PersistenceConfiguration.JDBC_PASSWORD, "")
                .property(PersistenceConfiguration.SCHEMAGEN_DATABASE_ACTION, "drop-and-create") // Recreate the database fresh; DO NOT USE IN PRODUCTION
                // Hibernate specific properties are found in the JdbcSettings class
                .property(JdbcSettings.SHOW_SQL, true)
                .property(JdbcSettings.FORMAT_SQL, true)
                .property(JdbcSettings.HIGHLIGHT_SQL, true)
                .createEntityManagerFactory();

        // Creating some data first
        emf.runInTransaction(entityManager -> {
            User u1 = new User("alice");
            User u2 = new User("bob");

            Post p = new Post("Post 1", "Lorem ipsum", u1);
            u1.getPosts().add(p);

            entityManager.persist(u1);
            entityManager.persist(u2);
            entityManager.persist(p);
        });

        List<User> users = findUsers(emf);
        for (User u : users) {
            System.out.printf("User '%s' has %d posts\n", u.getUsername(), u.getPosts().size());
        }

    }


    public static List<User> findUsers(EntityManagerFactory entityManagerFactory) {
        EntityManager entityManager = entityManagerFactory.createEntityManager();
        EntityTransaction tx = entityManager.getTransaction();
        tx.begin();
        try {
            List resultList = entityManager.createNamedQuery(User_.QUERY_FIND_ALL, User.class).getResultList();
            tx.commit();
            //resultList.forEach(user -> entityManager.detach(user));
            return resultList;
        } catch (Throwable t) {
            if (tx.isActive()) {
                tx.rollback();
            }
            throw t;
        }
    }
}
